---
references:
    - id: riscv-registers
      title: RISC-V Registers
      url: https://en.wikichip.org/wiki/risc-v/registers
    - id: x86-registers
      title: x86 Assembly/X86 Architecture
      url: https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture
    - id: x86-registers-video
      title: x86 Registers
      url: https://www.youtube.com/watch?v=xYaA2sBinb0  
    - id: machine-code
      type: video
      title: Machine Code Instructions
      url: https://www.youtube.com/watch?v=Mv2XQgpbTNE
---

# Архитектура компьютера

После включения компьютера, процессор начинает обрабатывать команды одна за одной

## Архитектура фон Неймана

Компьютеры общего назначения построены на архитектуре, предложенной в 1940х. 

### Оперативная память

Программа --- это набор инструкций для процессора, выполняющих преобразование над данными. Во время работы компьютера и программа, и данные для преобразования хранятся в *оперативной памяти* (ОЗУ^[оперативное запоминающее устройство], RAM^[random-access memory]). Работу программы можно свести к изменению одного состояния памяти на другое. 

Данные в RAM хранятся в битовой форме, всё доступное для хранения информации пространство поделено на ячейки. В одной ячейке могут храниться несколько бит информации, обычно данные представлены в виде *октетов*, т/е размер ячейки равен 8 бит (1 байт). Чтобы получить доступ к информации в памяти, необходимо обратиться к конкретной ячейке по её порядковому номеру, или *адресу*. Если данные хранятся в виде октетов, то операции чтения и записи тоже производятся октетами, т/е необходимо считать или изменить значение ячейки целиком, доступ к конкретному биту невозможен.

::: column-margin

RAM подразделяется на 2 типа:

DRAM
: (Dynamic RAM) основной тип ОЗУ, из-за токов утечки требует периодически перезаряжать ячейки, для сохранения в них информации, достигает размера в десятки ГБ. Чтение из DRAM деструктивно, т/е ячейка разряжается и требует перезаписи.

SRAM
: (Static RAM) не требует перезарядки, быстрее и дороже DRAM, используется для кеширования данных для ускорения доступа к DRAM, ограничивается десятками МБ.

:::

### Процессор

Любое нетривиальное вычислительное устройство можно назвать процессором, он может быть даже у проводной клавиатуры, однако, говоря о процессоре обычно подразумевают *центральный процессор* (ЦПУ, CPU^[central processing unit]).

Компьютер оборудован *генератором тактовых импульсов*, который нужен для синхронизации работы устройств. Напряжение с генератора подаётся на процессор и задаёт его *тактовую частоту*, аналогично «заводятся» и другие устройства. Такт --- это атомарное время процессора, т/е за один такт процессор единожды обновляет своё состояние. Простые инструкции, например, изменение знака числа $n \to -n$, могут выполняться за 1 такт. 

::: callout-note
Приведём здесь основные блоки процессора и затем разберём их подробнее:

регистры
: (registers) быстрая память процессора, в которой хранятся данные для обработки и промежуточные результаты;

устройство управления
: (УУ, CU --- Control Unit) --- координирует работу всех частей процессора, интерпретирует машинные инструкции, делегирует работу другим частям процессора;

арифметико-логическое устройство 
: (АЛУ, ALU --- Arithmetic Logic Unit) --- производит арифметические и логические операции над данными.
:::

Процессор исполняет инструкции, хранимые в ячейках RAM вместе с данными. Однако, у процессора есть аналоги ячеек памяти, называемые *регистрами*. Регистры --- собственная быстрая память процессора, как и в RAM они хранят несколько бит информации.

Регистры нужны не для скорости, а для непосредственных преобразований над данными. Аппаратная логика процессора реализует операции над регистрами. Например, чтобы сложить 2 числа, процессор хранит каждое в отдельном регистре, в другом регистре он хранит опткод операции суммирования. Результат тоже записывается в регистр и может использоваться для дальнейших вычислений или записывается в RAM.

Некоторые регистры имеют специальное название:

регистр команд
: хранит опткод исполняемой в данный момент команды;

регистр адреса
: объявляет адрес ячейки, к которой нужно получить доступ;

счётчик команд
: (PC --- program counter) регистр, хранящий адрес следующей команды в RAM.

Регистр --- это ячейка быстрой памяти, над которой можно выполнять не только чтение и запись, но и другие аппаратно реализованные в процессоре инструкции. Размер регистров процессора и ячеек оперативной памяти выбран неслучайно. Как и память оперирует ячейками целиком, так и процессор за один такт оперирует целыми регистрами. Размер регистра процессора называется *машинном словом* --- это характеристика конкретного процессора[^riscv-registers]. Процессор работает не с битами, байтами или числами, а с машинными словами. Если размер ячеек RAM совпадает с размером машинного слова, то последовательность бит из ячейки памяти копируется в регистр процессора (и наоборот) в точности, обмен данными осуществляется за 1 такт, а эффективность использования ресурсов максимальна.

[^riscv-registers]:
    процессоры с архитектурой RISC-V @riscv-registers дают доступ к 33м регистрам:
    
    - `pc` --- счётчик команд,
    - `x0` --- аппаратная константа «ноль», хранит `0` во всех битах регистра,
    - `x1`..`x31` --- регистры общего назначения, в них осуществляются базовые операции --- арифметические и логические, а также хранятся адреса ячеек памяти

[^x86-registers]:
    Процессоры с архитектурой x86 содержат восемь 32-битных регистра общего назначения [@x86-registers;@x86-registers-video]:
    
    - все 8 регистров могут работать в режиме 16-битного регистра, 
    - 4 регистра из 8 также могут одновременно эмулировать по два 8-битных.


Если машинное слово больше размера ячейки, то либо операция будет осуществляться с частично заполненным регистром[^x86-registers], либо процессор будет запрашивать данные у RAM пока его не заполнит. Большие регистры нужны, например, для операций с большими числами. Если число небольшое, большой регистр сможет сделать необходимое преобразование, но аналогичное преобразование сможет сделать и процессор с меньшими регистрами с той же эффективностью. Если размер регистра слишком мал для к-л сложной операции, данные можно хранить в нескольких регистрах, а саму команду реализовать через последовательность простых, но с увеличением числа операций.

В производительных процессорах используются регистры 32- или 64-бит, в более простых --- 8 или 16. Существуют и другие размеры регистров: поменьше, побольше и не кратные степеням 2ки, они не используются широко. Процессоры, работающие с 32-битными адресами памяти называют 32-разрядными, они могут адресовать до $2^{32}$ ячеек, если данные хранятся октетами (байтами), максимальный объём памяти RAM ограничен $\sim 4.3$ ГБ, или $=4$ *гибибайт*, однако, если адресовать не сами ячейки, а их блоки, ограничение можно обойти. 64-разрядные процессоры адресуют до $2^{64}$ бит памяти ($\sim 18.5$ млн ТБ, или $=16$ *эксбибайт*). В нормальном случае 32-раздярные процессоры работают на 32-битных регистрах, 64-разрядные --- на 64-битных, т/е могут совершать операции с адресами памяти за 1 такт.

### Шина

Шина --- устройство *передачи* данных между микросхемами. Первые шины представляли собой параллельно расположенные провода, информация по ним тоже передавалась параллельно. Сейчас шиной называют любое устройство, реализующую описанную функциональность.

CPU и RAM общаются с помощью шины: CPU выставляет на шине адрес ячейки памяти, шина передаёт адрес в RAM, выгружает оттуда данные, процессор забирает их в регистр, аналогично происходит запись. Обычно шина --- это параллельный интерфейс: и адрес, и содержимое ячейки передаются не в виде последовательности бит, а целым машинным словом, например, 8-битная шина передаёт 8-бит данных за раз, каждый бит по отдельному контакту. Некоторые шины используют *мультиплексирование*, т/е используют одни проводники сначала для чтения и затем для записи, что замедляет обмен.

Время, необходимое процессору для выполнения одной конкретной команды, называется *циклом команды*, он подразделяется на более короткие промежутки: чтобы выполнить простое сложения 2х чисел из RAM, необходимо загрузить из памяти инструкцию и потом сами числа, время между двумя последовательными обращениями к памяти называется *машинным циклом*^[более широко: любые этапы выполнения инструкции (или *машинной команды*), не только доступа к данным]. Если размер числа в 2 раза больше пропускной способности шины, потребуется 2 машинных цикла, чтобы его прочитать. На один машинный цикл требуется 1 или более тактов.

Для ускорения передачи данных в современных компьютерах шины специализируются: 

шина адреса
: забирает содержимое адресного регистра процессора и передаёт этот адрес в RAM.

шина данных
: передаёт данные в двух направлениях: из RAM в CPU и наоборот.

шина управления 
: рассылает управляющие сигналы между устройствами: когда процессор хочет получить данные, он выставляет адрес ячейки в адресном регистре и подаёт напряжение на специальную линию «нужны данные», так шина понимает, что адрес нужно считать; когда RAM подготовит нужные данные, она на другой линии выставит сигнал «данные готовы» и шина передаст их процессору.

Совокупность всех линий из трёх упомянутых выше шин называется *системной шиной*.

Разные типы данные передаются по разным протоколам и с разной скоростью, поэтому компьютеры работают со множеством шин: 

SATA
: последовательная шина для подключения жёстких дисков;

PCI Express
: последовательная шина для подключения периферии (сетевых и видеокарт, SSD итд);

USB
: последовательная шина для «пользовательских» устройств (флешки, клавиатуры).

Шины объединяют устройства в иерархические «сети», например,
через один USB-порт можно подключить до 127 устройств, используя USB-концентратор.

### Постоянная память

Сказанное выше описывает как функционирует уже запущенный компьютер, но не проясняет как он из выключенного состояния переходит в рабочее. Информация в регистрах процессора и в ячейках RAM *энергозависима*, т/е требует подачи напряжения для хранения. При выключении компьютер перестаёт получать питание от сети, процессор и RAM обесточиваются и вся хранимая в них информация исчезает.

При подаче питания компьютер сам должен подготовить себя к работе, в момент включения его регистры и ячейки пусты. Помимо процессора и RAM на материнской плате находится *постоянное запоминающее устройство* (ПЗУ, ROM^[read-only memory]) --- микросхема, которая не требует напряжения для хранения информации. К ROM редко предъявляются жёсткие требования: её объём мал, скорость доступа невелика, а возможности перезаписи во время работы отсутствуют, чтобы не испортить хранящиеся там критически важные данные. Запись машинного кода на ROM осуществляется через специальные устройства --- *программаторы*. *Прошить* микроконтроллер или плату означает записать программу в её ROM[^arduino-bootloader].

[^arduino-bootloader]:
  Некоторые микроконтроллеры могут перепрограммировать сами себя, получая прошивку по USB от компьютера. У Arduino, например, в конце ROM записан *загрузчик* (boorloader) --- машинный код, который исполняется после подачи питания, нажатии кнопки Reset или при получении специального сигнала от компьютера. Задача загрузчика --- запустить программу, записанную в ROM перед ним или перейти в режим программатора. В этом режиме микроконтроллер открывает свою ROM для записи и загружает в неё машинный код, полученный с компьютера.

При появлении напряжения процессор оживает и первым делом аппаратно выставляет адрес^[например, в процессорах x86 это 0xFFFFFFF0] из которой затребует первую инструкцию. По этому адресу в ROM содержится специально записанный машинный код, который будет исполнен. Загрузочного ROM[^ram-rom-von-neumann] может полностью хватит для запуска всей логики работы простого микроконтроллера. Обычно микроконтроллеры оснащены микросхемами энергонезависимой flash-памяти, на которую можно записать более сложную программу и данные, и считать их после загрузки. 

[^ram-rom-von-neumann]:
  В архитектуре фон Неймана ROM и RAM находятся в одном адресном пространстве, сначала адреса получает ROM --- c 0 до номера последней ячейки, затем адреса получает RAM. 

ROM --- маленькая и медленная память, при работе она играет роль только в микроконтроллерах[^ram-rom-harvard]. В компьютерах ROM используется для загрузки, в ней записаны программы (UEFI или BIOS), которые при включении компьютера проверяют его на работоспособность и затем загружают операционную систему с загрузочного раздела диска, после чего компьютером управляет уже ОС.

[^ram-rom-harvard]:
  
    В компьютерах с архитектурой фон Неймана в RAM хранятся и данные, и инструкции, они передаются в процессор по одной шине данных. В микроконтроллерах часто используется *гарвардская архитектура*, в ней инструкции и данные хранятся на разных устройствах, обладают разными адресными пространствами и передаются в процессор по разным шинам. Так построен, например, микроконтроллер Intel 8051: он может исполнять только программу записанную на ROM, а читает и записывает данные на RAM.

    Также регистры могут иметь общее адресное пространство с RAM: у микроконтроллеров AVR первые 32 адреса отданы под регистры общего назначения, следующие --- под регистры «устройств» (через них процессор общается с периферией), все оставшиеся адреса отданы под оперативную память (SRAM). Регистры общего назначения физически отделены от ОЗУ и находятся близко к АЛУ. Сравните с архитектурой фон Неймана.


Процессор и RAM связаны через системную шину, внешние диски (SSD или HDD) подключены к компьютеру через более медленные шины и не имеют доступа к процессору непосредственно. Данные с дисков копируются в RAM, оттуда процессор получает к ним доступ.

Доступ к файлам на диске реализует *файловая система*, она «записана» на самом диске и хранит информацию о самой себе, файлах, их размере итд. Обычно файловая система организует файлы иерархически: «адреса» составлены из последовательности каталогов с именем файла на конце. Сопоставление этих иерархических ссылок с секторами информации на диске тоже хранится прямо на диске. Файловая система независима от операционной системы, они взаимодействуют через API, для чего ОС нужны драйверы. Внешние диски и флешки тоже имеют свою файловую систему, она становится доступна при подключении^[В UNIX-подобных ОС иерархия файлов строится от единого корня `/`, внешние файловые системы *монтируются* в виде каталогов, например, `/drives/flash1`. В Windows каждая файловая система имеет свой корень, обозначаемый латинской буквой, например, `C`, `D` итд].